#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

struct test_struct
{
    int val;
    struct test_struct *next;
};

struct test_struct *head = NULL;
struct test_struct *curr = NULL;

struct test_struct* create_list(int val)
{
    printf("\n creating list with headnode as [%d]\n",val);
    struct test_struct *ptr = (struct test_struct*)malloc(sizeof(struct test_struct));
    if(NULL == ptr)
    {
        printf("\n Node creation failed \n");
        return NULL;
    }
    ptr->val = val;
    ptr->next = NULL;

    head = curr = ptr;
    return ptr;
}

struct test_struct* add_to_list(int val, bool add_to_end)
{
    if(NULL == head)
    {
        return (create_list(val));
    }

    if(add_to_end)
        printf("\n Adding node to end of list with value [%d]\n",val);
    else
        printf("\n Adding node to beginning of list with value [%d]\n",val);

    struct test_struct *ptr = (struct test_struct*)malloc(sizeof(struct test_struct));
    if(NULL == ptr)
    {
        printf("\n Node creation failed \n");
        return NULL;
    }
    ptr->val = val;
    ptr->next = NULL;

    if(add_to_end)
    {
        curr->next = ptr;
        curr = ptr;
    }
    else
    {
        ptr->next = head;
        head = ptr;
    }
    return ptr;
}

struct test_struct* search_in_list(int val, struct test_struct **prev)
{
    struct test_struct *ptr = head;
    struct test_struct *tmp = NULL;
    bool found = false;

    printf("\n Searching the list for value [%d] \n",val);

    while(ptr != NULL)
    {
        if(ptr->val == val)
        {
            found = true;
            break;
        }
        else
        {
            tmp = ptr;
            ptr = ptr->next;
        }
    }

    if(true == found)
    {
        if(prev)
            *prev = tmp;
        return ptr;
    }
    else
    {
        return NULL;
    }
}

int delete_from_list(int val)
{
    struct test_struct *prev = NULL;
    struct test_struct *del = NULL;

    printf("\n Deleting value [%d] from list\n",val);

    del = search_in_list(val,&prev);
    if(del == NULL)
    {
        return -1;
    }
    else
    {
        if(prev != NULL)
            prev->next = del->next;

        if(del == curr)
        {
            curr = prev;
        }
        else if(del == head)
        {
            head = del->next;
        }
    }

    free(del);
    del = NULL;

    return 0;
}

void print_list(void)
{
    struct test_struct *ptr = head;

    printf("\n -------Printing list Start------- \n");
    while(ptr != NULL)
    {
        printf("\n [%d] \n",ptr->val);
        ptr = ptr->next;
    }
    printf("\n -------Printing list End------- \n");

    return;
}

int main(void)
{
    int i = 0, ret = 0;
    struct test_struct *ptr = NULL;

    print_list();

    for(i = 5; i<10; i++)
        add_to_list(i,true);

    print_list();

    for(i = 4; i>0; i--)
        add_to_list(i,false);

    print_list();

    for(i = 1; i<10; i += 4)
    {
        ptr = search_in_list(i, NULL);
        if(NULL == ptr)
        {
            printf("\n Search [val = %d] failed, no such element found\n",i);
        }
        else
        {
            printf("\n Search passed [val = %d]\n",ptr->val);
        }

        print_list();

        ret = delete_from_list(i);
        if(ret != 0)
        {
            printf("\n delete [val = %d] failed, no such element found\n",i);
        }
        else
        {
            printf("\n delete [val = %d]  passed \n",i);
        }

        print_list();
    }

    return 0;
}


/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#include<ctype.h>
//creation of structure
struct node{
int data;
struct node *next;
}*start=NULL,*newnode,*temp,*a = NULL,*b = NULL,*c = NULL,*e = NULL,*tmp = NULL;//assigning pointers to structures
//start of main function
int main()
{
 int num,i,count;
 for(i=0;i<100;i++)
 {
     temp = start;
     num = rand()%999;//to generate random number using rand function
     newnode=(struct node*)malloc(sizeof(struct node));//to create new node
     newnode->data=num;
     if(start==NULL)//if start is NULL then assign to created new node
     {
	 newnode->next=NULL;
	 start=newnode;
     }
     else
     {
	 while(temp->next!=NULL)//newly created node is assigned to new node which points to NULL
	    temp=temp->next;
	 newnode->next=NULL;
	     temp->next=newnode;
     }
 }

 if(start==NULL)//to print assigned values in linked list before sorting
    printf("List is Empty\n");
 else
 {
     printf("Before Sorting:\n");
     count=0;
     for(temp=start;temp->next!=NULL;temp=temp->next)
     {
	printf("%d---->",temp->data);
	count++;
	if(count%5==0)
	 printf("\n");
     }
     if(temp->next==NULL)
     {
	 printf("%d---->NULL(end)\n",temp->data);
	 count++;
	 if(count%5==0)
	  printf("\n");
     }
 }

 while(e != start->next)//sorting of assigned values using bubble sort
    {
     c = a = start;
     b = a->next;
     while(a != e)
     {
      if(a->data > b->data)
      {
	if(a == start)
	{
	 tmp = b -> next;
	 b->next = a;
	 a->next = tmp;
	 start = b;
	 c = b;
	}
	else
	{
	 tmp = b->next;
	 b->next = a;
	 a->next = tmp;
	 c->next = b;
	 c = b;
	}
      }
      else
      {
	c = a;
	a = a->next;
      }
    b = a->next;
    if(b == e)
      e = a;
    }
 }

 if(start==NULL)//to print assigned values in linked list after sorting
    printf("List is Empty\n");
 else
 {
     printf("After Sorting:\n");
     count=0;
     for(temp=start;temp->next!=NULL;temp=temp->next)
     {
	  printf("%d---->",temp->data);
      count++;
	  if(count%5==0)
      printf("\n");
     }
     if(temp->next==NULL)
     {
	 printf("%d---->NULL(end)\n",temp->data);
	 count++;
	 if(count%5==0)
	  printf("\n");
     }
 }
 return 0;
}


